//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;

public class PlayerDashState : IPlayerState
{
	
		Vector2 startingPosition = Vector2.zero;
		float dashLength = 1.0f;
		public readonly float DASH_COOLDOWN = 2.0f;
		bool canDash = true;
		
		public PlayerDashState (Player player) : base(player)
		{
		
		}
		
		public override void HandleInput(){
		
			if (disabled) return;
		
			//if (!canDash) return;
			if ( Input.GetKeyDown (KeyCode.F)){
				DuringDash ();
				if (player.facingRight)
					player.rigidbody2D.AddForce(Vector2.right*player.dashForce);
				else
					player.rigidbody2D.AddForce (Vector2.right*-player.dashForce);
			}
			EndDash();
		}
		
		private void DuringDash(){
			player.movementState[Player.RUNNING].Disable();
			//canDash = false;
			startingPosition = player.transform.position;
			player.rigidbody2D.gravityScale = 0;
			player.rigidbody2D.velocity = new Vector2(0,0);
		}
		
		// When the player dashes, it records the starting position
		// after X amount of position travelled, we drop the player
		// to the ground
		void EndDash(){
			if (startingPosition == Vector2.zero) return;
			
			if (player.facingRight){
				if (player.transform.position.x >= startingPosition.x + dashLength){
					player.rigidbody2D.gravityScale = 2;
					player.rigidbody2D.AddForce(Vector2.right*-player.dashForce);	
					startingPosition = Vector2.zero;
					player.movementState[Player.RUNNING].Enable();
				
				}
			
			}
			else{
				if (player.transform.position.x <= startingPosition.x - dashLength){
					player.rigidbody2D.gravityScale = 2;
					player.rigidbody2D.AddForce (Vector2.right*player.dashForce);
					startingPosition = Vector2.zero;
					player.movementState[Player.RUNNING].Enable();
				
				}
			}					
		}
		
		public override void Start(){
		}
		
		public override void FixedUpdate(){}
		
		public override void Update(){
			HandleInput();
		
		}
		
		public override void Disable(){
			disabled = true;
		}
		
	public override void Enable(){
			disabled = false;
		}
}

